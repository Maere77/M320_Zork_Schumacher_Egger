package ch.bbw.zork;import java.util.ArrayList;public class Game {    private final Parser parser;    private Room currentRoom;    private Room previousRoom;    private Room outside, lab, tavern, gblock, office;    private final ArrayList<Room> rooms;    private final Backpack backpack;    public Game() {        parser = new Parser(System.in);        rooms = new ArrayList<>();        backpack = new Backpack(5000);        outside = new Room("outside G block on Peninsula campus");        lab = new Room("lab, a lecture theatre in A block");        tavern = new Room("the Seahorse Tavern (the campus pub)");        gblock = new Room("the G Block");        office = new Room("the computing admin office");        outside.put(null, lab, gblock, tavern);        lab.put(null, null, null, outside);        tavern.put(null, outside, null, null);        gblock.put(outside, office, null, null);        office.put(null, null, null, gblock);        outside.addItem(new Item("Map", "A detailed campus map", 100));        lab.addItem(new Item("Computer", "A state-of-the-art computer", 2000));        tavern.addItem(new Item("Beer", "A cold beer", 500));        gblock.addItem(new Item("Textbook", "A heavy textbook on programming", 1500));        office.addItem(new Item("Key", "A key to the office", 50));        rooms.add(outside);        rooms.add(lab);        rooms.add(tavern);        rooms.add(gblock);        rooms.add(office);        currentRoom = outside;        previousRoom = null;    }    public void play() {        printWelcome();        boolean finished = false;        while (!finished) {            Command command = parser.get();            finished = processCommand(command);        }        System.out.println("Thank you for playing. Good bye.");    }    private void printWelcome() {        System.out.println();        System.out.println("Welcome to Zork!");        System.out.println("Zork is a simple adventure game.");        System.out.println("Type 'help' if you need help.");        System.out.println();        System.out.println(currentRoom.longDescription());    }    private boolean processCommand(Command command) {        if (command.isUnknown()) {            System.out.println("I don't know what you mean...");            return false;        }        // Clean Code gemacht, dass es nicht die ganze Zeit if else {}        String commandWord = command.getCommandWord();        switch (commandWord) {            case "help":                printHelp();                break;            case "go":                goRoom(command);                break;            case "back":                goBack();                break;            case "map":                mapCard();                break;            case "itemsInRoom":                showItemsInRoom();                break;            case "pickup":                pickupItem(command);                break;            case "drop":                dropItem(command);                break;            case "quit":                if (command.hasSecondWord()) {                    System.out.println("Quit what?");                } else { return true; }                break;            case "showItems":                backpack.showItems();                break;            default:                System.out.println("Unrecognized command: " + commandWord);                break;        }        return false;    }    private void printHelp() {        System.out.println("You are lost. You are alone. You wander");        System.out.println("around at Monash Uni, Peninsula Campus.");        System.out.println();        System.out.println("Your command words are:");        System.out.println(parser.showCommands());    }    private void goRoom(Command command) {        if (!command.hasSecondWord()) {            System.out.println("Go where?");        } else {            String direction = command.getSecondWord();            Room nextRoom = currentRoom.nextRoom(direction);            if (nextRoom == null) {                System.out.println("There is no door!");            } else {                previousRoom = currentRoom;                currentRoom = nextRoom;                System.out.println(currentRoom.longDescription());            }        }    }    private void goBack() {        if (previousRoom == null) {            System.out.println("You can't go back, you haven't moved yet.");        } else {            Room tempRoom = currentRoom;            currentRoom = previousRoom;            previousRoom = tempRoom;            System.out.println("You go back to the previous room.");            System.out.println(currentRoom.longDescription());        }    }    private void mapCard() {        System.out.println("Map of all rooms and their items:");        for (Room room : rooms) {            System.out.println("Room: " + room.shortDescription());            System.out.println("Items:");            for (Item item : room.getItems()) {                System.out.println("- " + item.getName());            }            System.out.println();        }        System.out.println("You are currently in Room: " + currentRoom.shortDescription());    }    private void showItemsInRoom() {        if (currentRoom.getItems().isEmpty()) {            System.out.println("There are no items in this room.");        } else {            System.out.println("Items in this room:");            for (Item item : currentRoom.getItems()) {                System.out.println("- " + item.getName());            }        }    }    private void pickupItem(Command command) {        if (!command.hasSecondWord()) {            System.out.println("Pickup what?");            return;        }        String itemName = command.getSecondWord();        Item item = currentRoom.getItems().stream()                .filter(i -> i.getName().equalsIgnoreCase(itemName))                .findFirst()                .orElse(null);        if (item != null) {            if (backpack.addItem(item)) {                currentRoom.getItems().remove(item);                System.out.println("You picked up: " + item.getName());            }        } else {            System.out.println("Item not found in the room.");        }    }    private void dropItem(Command command) {        if (!command.hasSecondWord()) {            System.out.println("Drop what?");            return;        }        String itemName = command.getSecondWord();        Item item = backpack.getItems().stream()                .filter(i -> i.getName().equalsIgnoreCase(itemName))                .findFirst()                .orElse(null);        if (item != null) {            backpack.removeItem(item);            currentRoom.addItem(item);            System.out.println("You dropped: " + item.getName());        } else {            System.out.println("You don't have that item in your backpack.");        }    }}